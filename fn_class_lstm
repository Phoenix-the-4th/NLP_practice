import pandas as pd
from nltk.stem.porter import PorterStemmer
import re
from nltk.corpus import stopwords
import tensorflow as tf
from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import Dropout
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score


# importing dataset to dataframe and acclimating data
df = pd.read_csv('fake-news/train.csv')
df = df.dropna()
X = df.drop('label', axis = 1)
y = df['label']
df = df.dropna()
messages = X.copy()
messages.reset_index(inplace = True)


# stemming data
ps = PorterStemmer()
corpus = []
for i in range(0, len(messages)):
    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])
    review = review.lower()
    review = review.split()
    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

# onehot rep
voc_size = 5000
onehot_repr=[one_hot(words,voc_size)for words in corpus]

# embedding representation
sent_length=20
embedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)

# model
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features))
model.add(LSTM(100))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model.summary())

X_final=np.array(embedded_docs)
y_final=np.array(y)
X_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33)
model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)


# dropout model
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(Dropout(0.3))
model.add(LSTM(100))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

classes_x=model.predict(X_test) 
y_pred=np.argmax(classes_x,axis=1)
with open("output.txt", "a") as f:
    for i in range(len(y_test)):
        print(y_test[i], classes_x[i], y_pred[i], file = f)
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))